import streamlit as st
import pandas as pd
import plotly.express as px
from binance_api import get_ohlcv
from sqlalchemy import create_engine
from config import PG_CONN_STRING
from analysis import (
    select_top_coins,
)  # ƒê·∫£m b·∫£o d√πng k·∫øt n·ªëi PostgreSQL b√™n trong h√†m n√†y

# K·∫øt n·ªëi ƒë·∫øn PostgreSQL
engine = create_engine(PG_CONN_STRING)


def show_watchlist(symbols):
    st.set_page_config(
        layout="wide", page_title="Theo d√µi Coin Binance", page_icon="üí∞"
    )
    col1, col2 = st.columns([1, 3])

    with col1:
        with st.expander("B·ªô l·ªçc (Click ƒë·ªÉ thu g·ªçn/hi·ªán)", expanded=True):
            st.title("B·ªô l·ªçc")
            symbol = st.selectbox(
                "Ch·ªçn ƒë·ªìng coin",
                symbols,
                help=f"Ch·ªçn coin b·∫°n mu·ªën xem ({len(symbols)} coin)",
            )
            interval = st.selectbox(
                "Ch·ªçn khung th·ªùi gian",
                ["1m", "5m", "15m", "1h", "4h", "1d", "1w"],
                index=3,
            )

            data_raw = get_ohlcv(symbol, interval, limit=1000)
            df_raw = pd.DataFrame(
                data_raw,
                columns=[
                    "Th·ªùi gian m·ªü n·∫øn",
                    "Gi√° m·ªü c·ª≠a",
                    "Gi√° cao nh·∫•t",
                    "Gi√° th·∫•p nh·∫•t",
                    "Gi√° ƒë√≥ng c·ª≠a",
                    "Kh·ªëi l∆∞·ª£ng giao d·ªãch",
                    "Th·ªùi gian ƒë√≥ng n·∫øn",
                    "Kh·ªëi l∆∞·ª£ng quy ƒë·ªïi USDT",
                    "S·ªë l∆∞·ª£ng giao d·ªãch",
                    "Kh·ªëi l∆∞·ª£ng mua (base)",
                    "Kh·ªëi l∆∞·ª£ng mua (USDT)",
                    "B·ªè qua",
                ],
            )
            df_raw["Th·ªùi gian m·ªü n·∫øn"] = pd.to_datetime(
                df_raw["Th·ªùi gian m·ªü n·∫øn"], unit="ms"
            )

            # Convert numeric columns
            num_cols = [
                "Gi√° m·ªü c·ª≠a",
                "Gi√° cao nh·∫•t",
                "Gi√° th·∫•p nh·∫•t",
                "Gi√° ƒë√≥ng c·ª≠a",
                "Kh·ªëi l∆∞·ª£ng giao d·ªãch",
                "S·ªë l∆∞·ª£ng giao d·ªãch",
                "Kh·ªëi l∆∞·ª£ng mua (base)",
                "Kh·ªëi l∆∞·ª£ng mua (USDT)",
                "Kh·ªëi l∆∞·ª£ng quy ƒë·ªïi USDT",
            ]
            for col in num_cols:
                df_raw[col] = pd.to_numeric(df_raw[col], errors="coerce")

            # C√°c b·ªô l·ªçc
            start_date = st.date_input(
                "Ng√†y b·∫Øt ƒë·∫ßu", df_raw["Th·ªùi gian m·ªü n·∫øn"].min().date()
            )
            end_date = st.date_input(
                "Ng√†y k·∫øt th√∫c", df_raw["Th·ªùi gian m·ªü n·∫øn"].max().date()
            )
            if start_date > end_date:
                st.error("Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ng√†y k·∫øt th√∫c.")

            min_open, max_open = st.slider(
                "Kho·∫£ng gi√° m·ªü c·ª≠a",
                float(df_raw["Gi√° m·ªü c·ª≠a"].min()),
                float(df_raw["Gi√° m·ªü c·ª≠a"].max()),
                (float(df_raw["Gi√° m·ªü c·ª≠a"].min()), float(df_raw["Gi√° m·ªü c·ª≠a"].max())),
                step=0.01,
            )
            min_close, max_close = st.slider(
                "Kho·∫£ng gi√° ƒë√≥ng c·ª≠a",
                float(df_raw["Gi√° ƒë√≥ng c·ª≠a"].min()),
                float(df_raw["Gi√° ƒë√≥ng c·ª≠a"].max()),
                (
                    float(df_raw["Gi√° ƒë√≥ng c·ª≠a"].min()),
                    float(df_raw["Gi√° ƒë√≥ng c·ª≠a"].max()),
                ),
                step=0.01,
            )
            min_vol, max_vol = st.slider(
                "Kh·ªëi l∆∞·ª£ng giao d·ªãch",
                float(df_raw["Kh·ªëi l∆∞·ª£ng giao d·ªãch"].min()),
                float(df_raw["Kh·ªëi l∆∞·ª£ng giao d·ªãch"].max()),
                (
                    float(df_raw["Kh·ªëi l∆∞·ª£ng giao d·ªãch"].min()),
                    float(df_raw["Kh·ªëi l∆∞·ª£ng giao d·ªãch"].max()),
                ),
                step=0.01,
            )
            min_trades = st.number_input(
                "T·ªëi thi·ªÉu s·ªë l∆∞·ª£ng giao d·ªãch", min_value=0, value=0, step=1
            )
            min_buy_base, max_buy_base = st.slider(
                "Kh·ªëi l∆∞·ª£ng mua (base)",
                float(df_raw["Kh·ªëi l∆∞·ª£ng mua (base)"].min()),
                float(df_raw["Kh·ªëi l∆∞·ª£ng mua (base)"].max()),
                (
                    float(df_raw["Kh·ªëi l∆∞·ª£ng mua (base)"].min()),
                    float(df_raw["Kh·ªëi l∆∞·ª£ng mua (base)"].max()),
                ),
                step=0.01,
            )

            df_raw["Bi·∫øn ƒë·ªông"] = df_raw["Gi√° cao nh·∫•t"] - df_raw["Gi√° th·∫•p nh·∫•t"]
            min_volatility, max_volatility = st.slider(
                "Bi·∫øn ƒë·ªông gi√° (High - Low)",
                float(df_raw["Bi·∫øn ƒë·ªông"].min()),
                float(df_raw["Bi·∫øn ƒë·ªông"].max()),
                (float(df_raw["Bi·∫øn ƒë·ªông"].min()), float(df_raw["Bi·∫øn ƒë·ªông"].max())),
                step=0.01,
            )

            num_rows = st.slider("S·ªë d√≤ng d·ªØ li·ªáu hi·ªÉn th·ªã", 10, 1000, 100)

    with col2:
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
            all_symbols = [s for s in symbols if s.endswith("USDT")]
            with engine.connect() as conn:
                top_coins = select_top_coins(conn, all_symbols, top_n=20)

            if top_coins.empty:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.")
            else:
                st.write("### Top 20 ƒë·ªìng coin n√™n ƒë·∫ßu t∆∞")
                st.dataframe(
                    top_coins[
                        [
                            "symbol",
                            "win_rate",
                            "loss_rate",
                            "avg_volume",
                            "volatility",
                            "price_growth",
                        ]
                    ],
                    use_container_width=True,
                )

        st.title("üìä B·∫£ng ƒëi·ªÅu khi·ªÉn gi√° Coin Binance")

        df = df_raw[
            (df_raw["Th·ªùi gian m·ªü n·∫øn"].dt.date >= start_date)
            & (df_raw["Th·ªùi gian m·ªü n·∫øn"].dt.date <= end_date)
            & (df_raw["Gi√° m·ªü c·ª≠a"] >= min_open)
            & (df_raw["Gi√° m·ªü c·ª≠a"] <= max_open)
            & (df_raw["Gi√° ƒë√≥ng c·ª≠a"] >= min_close)
            & (df_raw["Gi√° ƒë√≥ng c·ª≠a"] <= max_close)
            & (df_raw["Kh·ªëi l∆∞·ª£ng giao d·ªãch"] >= min_vol)
            & (df_raw["Kh·ªëi l∆∞·ª£ng giao d·ªãch"] <= max_vol)
            & (df_raw["S·ªë l∆∞·ª£ng giao d·ªãch"] >= min_trades)
            & (df_raw["Kh·ªëi l∆∞·ª£ng mua (base)"] >= min_buy_base)
            & (df_raw["Kh·ªëi l∆∞·ª£ng mua (base)"] <= max_buy_base)
            & (df_raw["Bi·∫øn ƒë·ªông"] >= min_volatility)
            & (df_raw["Bi·∫øn ƒë·ªông"] <= max_volatility)
        ]

        if df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc.")
        else:
            fig = px.line(
                df,
                x="Th·ªùi gian m·ªü n·∫øn",
                y="Gi√° ƒë√≥ng c·ª≠a",
                title=f"Bi·ªÉu ƒë·ªì gi√° {symbol}",
                hover_data=[
                    "Gi√° m·ªü c·ª≠a",
                    "Gi√° cao nh·∫•t",
                    "Gi√° th·∫•p nh·∫•t",
                    "Kh·ªëi l∆∞·ª£ng giao d·ªãch",
                ],
            )
            fig.update_layout(xaxis_title="Th·ªùi gian", yaxis_title="Gi√° ƒë√≥ng c·ª≠a")
            st.plotly_chart(fig, use_container_width=True)

            st.subheader(f"üìã B·∫£ng d·ªØ li·ªáu ({num_rows} d√≤ng m·ªõi nh·∫•t)")
            st.dataframe(
                df.tail(num_rows).reset_index(drop=True), use_container_width=True
            )
