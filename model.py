# model.py

import xgboost as xgb
import joblib
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from config import MODEL_PATH
from binance_api import get_ohlcv


def add_technical_indicators(df):
    """
    Th√™m c√°c ch·ªâ b√°o k·ªπ thu·∫≠t v√†o DataFrame bao g·ªìm EMA, RSI, v√† % thay ƒë·ªïi gi√° ƒë√≥ng c·ª≠a.

    :param df: DataFrame ch·ª©a d·ªØ li·ªáu OHLCV c·ªßa m·ªôt c·∫∑p giao d·ªãch
    :return: DataFrame v·ªõi c√°c ch·ªâ b√°o k·ªπ thu·∫≠t ƒë∆∞·ª£c th√™m v√†o
    """

    # 1. Exponential Moving Average (EMA) v·ªõi chu k·ª≥ 10
    df["EMA_10"] = df["close"].ewm(span=10, adjust=False).mean()

    # 2. Relative Strength Index (RSI) v·ªõi chu k·ª≥ 14
    delta = df["close"].diff()
    gain = delta.where(
        delta > 0, 0
    )  # N·∫øu c√≥ l√£i (gi√° tƒÉng) th√¨ gi·ªØ l·∫°i, n·∫øu kh√¥ng th√¨ cho gi√° tr·ªã 0
    loss = -delta.where(
        delta < 0, 0
    )  # N·∫øu c√≥ l·ªó (gi√° gi·∫£m) th√¨ gi·ªØ l·∫°i, n·∫øu kh√¥ng th√¨ cho gi√° tr·ªã 0
    avg_gain = gain.rolling(window=14).mean()  # Trung b√¨nh ƒë·ªông c·ªßa l√£i
    avg_loss = loss.rolling(window=14).mean()  # Trung b√¨nh ƒë·ªông c·ªßa l·ªó
    rs = avg_gain / avg_loss  # T√≠nh t·ª∑ l·ªá c·ªßa l√£i v√† l·ªó
    df["RSI_14"] = 100 - (100 / (1 + rs))  # T√≠nh RSI theo c√¥ng th·ª©c chu·∫©n

    # 3. T√≠nh % thay ƒë·ªïi c·ªßa gi√° ƒë√≥ng c·ª≠a
    df["pct_change"] = df[
        "close"
    ].pct_change()  # Thay ƒë·ªïi theo ph·∫ßn trƒÉm gi·ªØa c√°c gi√° ƒë√≥ng c·ª≠a

    # 4. ƒêi·ªÅn gi√° tr·ªã NaN b·∫±ng 0 (tr√°nh l·ªói khi t√≠nh to√°n)
    df.fillna(0, inplace=True)

    return df


def train_model(X, y):
    model = xgb.XGBClassifier(
        n_estimators=100,
        max_depth=4,
        learning_rate=0.1,
        eval_metric="logloss",
    )
    model.fit(X, y)
    return model


def create_features_and_labels(df):
    """
    T·∫°o c√°c ƒë·∫∑c tr∆∞ng (features) v√† nh√£n (labels) t·ª´ d·ªØ li·ªáu OHLCV.

    :param df: DataFrame ch·ª©a d·ªØ li·ªáu OHLCV ƒë√£ ƒë∆∞·ª£c t√≠nh c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
    :return: X (c√°c ƒë·∫∑c tr∆∞ng), y (nh√£n)
    """

    # C√°c c·ªôt ƒë·∫∑c tr∆∞ng (features)
    feature_cols = [
        "open",  # Gi√° m·ªü c·ª≠a
        "high",  # Gi√° cao nh·∫•t
        "low",  # Gi√° th·∫•p nh·∫•t
        "close",  # Gi√° ƒë√≥ng c·ª≠a
        "volume",  # Kh·ªëi l∆∞·ª£ng giao d·ªãch
        "EMA_10",  # Exponential Moving Average (EMA) v·ªõi chu k·ª≥ 10
        "RSI_14",  # Relative Strength Index (RSI) v·ªõi chu k·ª≥ 14
        "pct_change",  # T·ª∑ l·ªá thay ƒë·ªïi gi√° ƒë√≥ng c·ª≠a
    ]

    # T·∫°o nh√£n: D·ª± ƒëo√°n gi√° ƒë√≥ng c·ª≠a c·ªßa k·ª≥ ti·∫øp theo c√≥ l·ªõn h∆°n k·ª≥ hi·ªán t·∫°i kh√¥ng?
    df["close_next"] = df["close"].shift(-1)  # D·ªãch gi√° ƒë√≥ng c·ª≠a c·ªßa k·ª≥ ti·∫øp theo
    df["label"] = (df["close_next"] > df["close"]).astype(
        int
    )  # N·∫øu ƒë√≥ng c·ª≠a ti·∫øp theo l·ªõn h∆°n => Label = 1, ng∆∞·ª£c l·∫°i l√† 0

    df.dropna(inplace=True)  # Lo·∫°i b·ªè c√°c d√≤ng c√≥ gi√° tr·ªã NaN (do shift)

    # T·∫°o c√°c ƒë·∫∑c tr∆∞ng (X) v√† nh√£n (y)
    X = df[feature_cols]  # C√°c ƒë·∫∑c tr∆∞ng
    y = df["label"]  # Nh√£n (label)

    return X, y


def save_model(model):
    joblib.dump(model, MODEL_PATH)
    print(f"Model saved to {MODEL_PATH}")


def load_model():
    try:
        model = joblib.load(MODEL_PATH)
        print(f"Model loaded from {MODEL_PATH}")
        return model
    except Exception as e:
        print(f"Error loading model: {e}")
        return None


def predict_and_trade(symbol="BTCUSDT"):
    print(f"üîç Predicting for {symbol}...")

    # 1. Load model
    model = load_model()

    # 2. L·∫•y d·ªØ li·ªáu m·ªõi
    df = get_ohlcv(symbol, interval="1m", limit=100)
    df = add_technical_indicators(df)

    # 3. T·∫°o feature (X) nh∆∞ l√∫c train
    X, _ = create_features_and_labels(df)

    if X.empty:
        print("‚ùå Not enough data to predict.")
        return

    # 4. L·∫•y h√†ng cu·ªëi c√πng ƒë·ªÉ predict
    last_row = X.iloc[[-1]]
    prediction = model.predict(last_row)[0]

    # 5. Hi·ªÉn th·ªã k·∫øt qu·∫£
    if prediction == 1:
        print(f"üü¢ {symbol}: BUY signal!")
    elif prediction == -1:
        print(f"üî¥ {symbol}: SELL signal!")
    else:
        print(f"‚ö™ {symbol}: HOLD signal.")
